// Code generated by sqlc. DO NOT EDIT.
// source: discussion.sql

package db

import (
	"context"
	"database/sql"
)

const addPostDiscussion = `-- name: AddPostDiscussion :one
INSERT INTO resource_discussions (
  creator_id,
  post_id,
  title,
  description
) VALUES (
    $1, $2, $3, $4
) RETURNING id, creator_id, post_id, creation_time, title, description
`

type AddPostDiscussionParams struct {
	CreatorID   string         `json:"creator_id"`
	PostID      string         `json:"post_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) AddPostDiscussion(ctx context.Context, arg AddPostDiscussionParams) (ResourceDiscussion, error) {
	row := q.queryRow(ctx, q.addPostDiscussionStmt, addPostDiscussion,
		arg.CreatorID,
		arg.PostID,
		arg.Title,
		arg.Description,
	)
	var i ResourceDiscussion
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PostID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getDiscussionComments = `-- name: GetDiscussionComments :many
SELECT id, discussion_id, user_id, creation_time, content FROM discussion_comments
WHERE discussion_id = $1
ORDER BY creation_time DESC
`

func (q *Queries) GetDiscussionComments(ctx context.Context, discussionID int64) ([]DiscussionComment, error) {
	rows, err := q.query(ctx, q.getDiscussionCommentsStmt, getDiscussionComments, discussionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscussionComment{}
	for rows.Next() {
		var i DiscussionComment
		if err := rows.Scan(
			&i.ID,
			&i.DiscussionID,
			&i.UserID,
			&i.CreationTime,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDiscussionCommentsByUser = `-- name: GetDiscussionCommentsByUser :many
SELECT id, discussion_id, user_id, creation_time, content FROM discussion_comments
WHERE user_id = $1
ORDER BY creation_time DESC
`

func (q *Queries) GetDiscussionCommentsByUser(ctx context.Context, userID string) ([]DiscussionComment, error) {
	rows, err := q.query(ctx, q.getDiscussionCommentsByUserStmt, getDiscussionCommentsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DiscussionComment{}
	for rows.Next() {
		var i DiscussionComment
		if err := rows.Scan(
			&i.ID,
			&i.DiscussionID,
			&i.UserID,
			&i.CreationTime,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostDiscussions = `-- name: GetPostDiscussions :many
SELECT id, creator_id, post_id, creation_time, title, description FROM resource_discussions
WHERE post_id = $1
ORDER BY creation_time DESC
`

func (q *Queries) GetPostDiscussions(ctx context.Context, postID string) ([]ResourceDiscussion, error) {
	rows, err := q.query(ctx, q.getPostDiscussionsStmt, getPostDiscussions, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResourceDiscussion{}
	for rows.Next() {
		var i ResourceDiscussion
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostDiscussionsByUser = `-- name: GetPostDiscussionsByUser :many
SELECT id, creator_id, post_id, creation_time, title, description FROM resource_discussions
WHERE creator_id = $1
ORDER BY creation_time DESC
`

func (q *Queries) GetPostDiscussionsByUser(ctx context.Context, creatorID string) ([]ResourceDiscussion, error) {
	rows, err := q.query(ctx, q.getPostDiscussionsByUserStmt, getPostDiscussionsByUser, creatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResourceDiscussion{}
	for rows.Next() {
		var i ResourceDiscussion
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllDiscussionComments = `-- name: RemoveAllDiscussionComments :exec
DELETE FROM discussion_comments
WHERE discussion_id = $1
`

func (q *Queries) RemoveAllDiscussionComments(ctx context.Context, discussionID int64) error {
	_, err := q.exec(ctx, q.removeAllDiscussionCommentsStmt, removeAllDiscussionComments, discussionID)
	return err
}

const removeDiscussionComment = `-- name: RemoveDiscussionComment :exec
DELETE FROM discussion_comments
WHERE id = $1
`

func (q *Queries) RemoveDiscussionComment(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.removeDiscussionCommentStmt, removeDiscussionComment, id)
	return err
}

const removeDiscussionCommentsByUser = `-- name: RemoveDiscussionCommentsByUser :exec
DELETE FROM discussion_comments
WHERE discussion_id = $1 AND user_id = $2
`

type RemoveDiscussionCommentsByUserParams struct {
	DiscussionID int64  `json:"discussion_id"`
	UserID       string `json:"user_id"`
}

func (q *Queries) RemoveDiscussionCommentsByUser(ctx context.Context, arg RemoveDiscussionCommentsByUserParams) error {
	_, err := q.exec(ctx, q.removeDiscussionCommentsByUserStmt, removeDiscussionCommentsByUser, arg.DiscussionID, arg.UserID)
	return err
}

const removePostDiscussion = `-- name: RemovePostDiscussion :exec
DELETE FROM resource_discussions
WHERE id = $1
`

func (q *Queries) RemovePostDiscussion(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.removePostDiscussionStmt, removePostDiscussion, id)
	return err
}

const removePostDiscussionsByCreator = `-- name: RemovePostDiscussionsByCreator :exec
DELETE FROM resource_discussions
WHERE creator_id = $1
`

func (q *Queries) RemovePostDiscussionsByCreator(ctx context.Context, creatorID string) error {
	_, err := q.exec(ctx, q.removePostDiscussionsByCreatorStmt, removePostDiscussionsByCreator, creatorID)
	return err
}

const updateDiscussionComment = `-- name: UpdateDiscussionComment :one
UPDATE discussion_comments
SET content = $2
WHERE id = $1
RETURNING id, discussion_id, user_id, creation_time, content
`

type UpdateDiscussionCommentParams struct {
	ID      int64          `json:"id"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdateDiscussionComment(ctx context.Context, arg UpdateDiscussionCommentParams) (DiscussionComment, error) {
	row := q.queryRow(ctx, q.updateDiscussionCommentStmt, updateDiscussionComment, arg.ID, arg.Content)
	var i DiscussionComment
	err := row.Scan(
		&i.ID,
		&i.DiscussionID,
		&i.UserID,
		&i.CreationTime,
		&i.Content,
	)
	return i, err
}

const updatePostDiscussion = `-- name: UpdatePostDiscussion :one
UPDATE resource_discussions
SET title = $2, description = $3
WHERE id = $1
RETURNING id, creator_id, post_id, creation_time, title, description
`

type UpdatePostDiscussionParams struct {
	ID          int64          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdatePostDiscussion(ctx context.Context, arg UpdatePostDiscussionParams) (ResourceDiscussion, error) {
	row := q.queryRow(ctx, q.updatePostDiscussionStmt, updatePostDiscussion, arg.ID, arg.Title, arg.Description)
	var i ResourceDiscussion
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PostID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}
