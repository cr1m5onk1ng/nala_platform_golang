// Code generated by sqlc. DO NOT EDIT.
// source: resource.sql

package db

import (
	"context"
	"database/sql"
)

const addResource = `-- name: AddResource :one
INSERT INTO resources (
  url, 
  language, 
  difficulty, 
  title, 
  description, 
  media_type, 
  category, 
  thumbnail_url   
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at
`

type AddResourceParams struct {
	Url          string         `json:"url"`
	Language     string         `json:"language"`
	Difficulty   sql.NullString `json:"difficulty"`
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	MediaType    sql.NullString `json:"media_type"`
	Category     string         `json:"category"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
}

func (q *Queries) AddResource(ctx context.Context, arg AddResourceParams) (Resource, error) {
	row := q.queryRow(ctx, q.addResourceStmt, addResource,
		arg.Url,
		arg.Language,
		arg.Difficulty,
		arg.Title,
		arg.Description,
		arg.MediaType,
		arg.Category,
		arg.ThumbnailUrl,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Language,
		&i.Difficulty,
		&i.Title,
		&i.Description,
		&i.MediaType,
		&i.Category,
		&i.ThumbnailUrl,
		&i.InsertedAt,
	)
	return i, err
}

const getResourceById = `-- name: GetResourceById :one
SELECT id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM resources
WHERE id = $1
`

func (q *Queries) GetResourceById(ctx context.Context, id int64) (Resource, error) {
	row := q.queryRow(ctx, q.getResourceByIdStmt, getResourceById, id)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Language,
		&i.Difficulty,
		&i.Title,
		&i.Description,
		&i.MediaType,
		&i.Category,
		&i.ThumbnailUrl,
		&i.InsertedAt,
	)
	return i, err
}

const getResourceByUrl = `-- name: GetResourceByUrl :one
SELECT id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM resources
WHERE url = $1 
LIMIT 1
`

func (q *Queries) GetResourceByUrl(ctx context.Context, url string) (Resource, error) {
	row := q.queryRow(ctx, q.getResourceByUrlStmt, getResourceByUrl, url)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Language,
		&i.Difficulty,
		&i.Title,
		&i.Description,
		&i.MediaType,
		&i.Category,
		&i.ThumbnailUrl,
		&i.InsertedAt,
	)
	return i, err
}

const getResourcePost = `-- name: GetResourcePost :one
SELECT id, user_id, resource_id, post_time, post_title, post_description FROM user_post
WHERE resource_id = $1
LIMIT 1
`

func (q *Queries) GetResourcePost(ctx context.Context, resourceID int64) (UserPost, error) {
	row := q.queryRow(ctx, q.getResourcePostStmt, getResourcePost, resourceID)
	var i UserPost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResourceID,
		&i.PostTime,
		&i.PostTitle,
		&i.PostDescription,
	)
	return i, err
}

const getResourcesByLanguage = `-- name: GetResourcesByLanguage :many
SELECT id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM resources
WHERE language = $1
ORDER BY inserted_at DESC
`

func (q *Queries) GetResourcesByLanguage(ctx context.Context, language string) ([]Resource, error) {
	rows, err := q.query(ctx, q.getResourcesByLanguageStmt, getResourcesByLanguage, language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resource{}
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResourcesPostsByUser = `-- name: GetResourcesPostsByUser :many
SELECT id, user_id, resource_id, post_time, post_title, post_description FROM user_post
WHERE user_id = $1
ORDER BY post_time DESC
`

func (q *Queries) GetResourcesPostsByUser(ctx context.Context, userID string) ([]UserPost, error) {
	rows, err := q.query(ctx, q.getResourcesPostsByUserStmt, getResourcesPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPost{}
	for rows.Next() {
		var i UserPost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PostTime,
			&i.PostTitle,
			&i.PostDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResource = `-- name: UpdateResource :one
UPDATE resources
SET url = $2, language = $3, difficulty = $4, title = $5, description = $6, media_type = $7, category = $8, thumbnail_url = $9
WHERE id = $1
RETURNING id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at
`

type UpdateResourceParams struct {
	ID           int64          `json:"id"`
	Url          string         `json:"url"`
	Language     string         `json:"language"`
	Difficulty   sql.NullString `json:"difficulty"`
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
	MediaType    sql.NullString `json:"media_type"`
	Category     string         `json:"category"`
	ThumbnailUrl sql.NullString `json:"thumbnail_url"`
}

func (q *Queries) UpdateResource(ctx context.Context, arg UpdateResourceParams) (Resource, error) {
	row := q.queryRow(ctx, q.updateResourceStmt, updateResource,
		arg.ID,
		arg.Url,
		arg.Language,
		arg.Difficulty,
		arg.Title,
		arg.Description,
		arg.MediaType,
		arg.Category,
		arg.ThumbnailUrl,
	)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Language,
		&i.Difficulty,
		&i.Title,
		&i.Description,
		&i.MediaType,
		&i.Category,
		&i.ThumbnailUrl,
		&i.InsertedAt,
	)
	return i, err
}
