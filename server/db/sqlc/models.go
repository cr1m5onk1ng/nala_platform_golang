// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"database/sql"
	"encoding/json"
	"time"
)

type CommentsLike struct {
	CommentID int64  `json:"comment_id"`
	UserID    string `json:"user_id"`
}

type Community struct {
	ID           int64           `json:"id"`
	Language     string          `json:"language"`
	Title        string          `json:"title"`
	ThumbnailUrl string          `json:"thumbnail_url"`
	Metadata     json.RawMessage `json:"metadata"`
}

type CommunityUser struct {
	CommunityID int64  `json:"community_id"`
	UserID      string `json:"user_id"`
}

type DiscussionComment struct {
	ID              int64     `json:"id"`
	DiscussionID    int64     `json:"discussion_id"`
	ParentCommentID int64     `json:"parent_comment_id"`
	UserID          string    `json:"user_id"`
	CreatedAt       time.Time `json:"created_at"`
	UpdatedAt       time.Time `json:"updated_at"`
	Content         string    `json:"content"`
}

type Learning struct {
	UserID   string `json:"user_id"`
	Language string `json:"language"`
}

type Like struct {
	UserID string `json:"user_id"`
	PostID string `json:"post_id"`
}

type PostDiscussion struct {
	ID           int64          `json:"id"`
	CreatorID    string         `json:"creator_id"`
	PostID       string         `json:"post_id"`
	CreationTime time.Time      `json:"creation_time"`
	Title        string         `json:"title"`
	Description  sql.NullString `json:"description"`
}

type PostTag struct {
	TagID  int64  `json:"tag_id"`
	PostID string `json:"post_id"`
}

type PostTopic struct {
	PostID  string `json:"post_id"`
	TopicID int64  `json:"topic_id"`
}

type Resource struct {
	ID  int64  `json:"id"`
	Url string `json:"url"`
	// 2 chars language code
	Language   string `json:"language"`
	Difficulty string `json:"difficulty"`
	MediaType  string `json:"media_type"`
	Category   string `json:"category"`
}

type StudyList struct {
	ID           int64     `json:"id"`
	UserID       string    `json:"user_id"`
	CreationTime time.Time `json:"creation_time"`
	Title        string    `json:"title"`
	Description  string    `json:"description"`
	Public       bool      `json:"public"`
}

type StudyListResource struct {
	StudyListID int64     `json:"study_list_id"`
	ResourceID  int64     `json:"resource_id"`
	TimeAdded   time.Time `json:"time_added"`
}

type Tag struct {
	ID  int64  `json:"id"`
	Tag string `json:"tag"`
}

type Topic struct {
	ID        int64     `json:"id"`
	Topic     string    `json:"topic"`
	CreatedAt time.Time `json:"created_at"`
}

type User struct {
	// use UUID
	ID                string    `json:"id"`
	Username          string    `json:"username"`
	Email             string    `json:"email"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	RegistrationDate  time.Time `json:"registration_date"`
	// 2 chars language code
	NativeLanguage string         `json:"native_language"`
	Role           sql.NullString `json:"role"`
}

type UserFollow struct {
	FollowerUserID string    `json:"follower_user_id"`
	FollowedUserID string    `json:"followed_user_id"`
	UpdatedAt      time.Time `json:"updated_at"`
}

type UserIsFollowed struct {
	FollowedUserID string    `json:"followed_user_id"`
	FollowerUserID string    `json:"follower_user_id"`
	UpdatedAt      time.Time `json:"updated_at"`
}

type UserPost struct {
	// use UUID
	ID              string         `json:"id"`
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTime        time.Time      `json:"post_time"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
}

type Vote struct {
	UserID     string `json:"user_id"`
	PostID     string `json:"post_id"`
	Difficulty string `json:"difficulty"`
}
