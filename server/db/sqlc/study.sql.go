// Code generated by sqlc. DO NOT EDIT.
// source: study.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addResourceToStudyList = `-- name: AddResourceToStudyList :one
INSERT INTO study_list_resource (
  study_list_id,
  resource_id
) VALUES (
    $1, $2
) RETURNING study_list_id, resource_id, time_added
`

type AddResourceToStudyListParams struct {
	StudyListID int64 `json:"study_list_id"`
	ResourceID  int64 `json:"resource_id"`
}

func (q *Queries) AddResourceToStudyList(ctx context.Context, arg AddResourceToStudyListParams) (StudyListResource, error) {
	row := q.queryRow(ctx, q.addResourceToStudyListStmt, addResourceToStudyList, arg.StudyListID, arg.ResourceID)
	var i StudyListResource
	err := row.Scan(&i.StudyListID, &i.ResourceID, &i.TimeAdded)
	return i, err
}

const addStudyList = `-- name: AddStudyList :one
INSERT INTO study_lists (
  user_id,
  title,
  description 
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, creation_time, title, description
`

type AddStudyListParams struct {
	UserID      string `json:"user_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) AddStudyList(ctx context.Context, arg AddStudyListParams) (StudyList, error) {
	row := q.queryRow(ctx, q.addStudyListStmt, addStudyList, arg.UserID, arg.Title, arg.Description)
	var i StudyList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getStudyList = `-- name: GetStudyList :one
SELECT id, user_id, creation_time, title, description FROM study_lists
WHERE id = $1
`

func (q *Queries) GetStudyList(ctx context.Context, id int64) (StudyList, error) {
	row := q.queryRow(ctx, q.getStudyListStmt, getStudyList, id)
	var i StudyList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getStudyListResources = `-- name: GetStudyListResources :many
SELECT r.id, r.url, r.language, r.difficulty, r.title, r.description, r.media_type, r.category, r.thumbnail_url, r.inserted_at FROM study_list_resource AS slr
JOIN resources r
ON r.id = slr.resource_id
WHERE slr.study_list_id = $1
ORDER BY slr.time_added DESC
`

func (q *Queries) GetStudyListResources(ctx context.Context, studyListID int64) ([]Resource, error) {
	rows, err := q.query(ctx, q.getStudyListResourcesStmt, getStudyListResources, studyListID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Resource{}
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSavedResources = `-- name: GetUserSavedResources :many
SELECT study_list_id, resource_id, time_added, r.id, url, language, difficulty, r.title, r.description, media_type, category, thumbnail_url, inserted_at, sl.id, user_id, creation_time, sl.title, sl.description FROM study_list_resource AS slr
JOIN resources AS r
ON r.id = slr.resource_id
JOIN study_lists AS sl
ON sl.id = slr.study_list_id
WHERE sl.user_id = $1
ORDER BY slr.time_added DESC
`

type GetUserSavedResourcesRow struct {
	StudyListID   int64          `json:"study_list_id"`
	ResourceID    int64          `json:"resource_id"`
	TimeAdded     time.Time      `json:"time_added"`
	ID            int64          `json:"id"`
	Url           string         `json:"url"`
	Language      string         `json:"language"`
	Difficulty    sql.NullString `json:"difficulty"`
	Title         string         `json:"title"`
	Description   sql.NullString `json:"description"`
	MediaType     sql.NullString `json:"media_type"`
	Category      string         `json:"category"`
	ThumbnailUrl  sql.NullString `json:"thumbnail_url"`
	InsertedAt    time.Time      `json:"inserted_at"`
	ID_2          int64          `json:"id_2"`
	UserID        string         `json:"user_id"`
	CreationTime  time.Time      `json:"creation_time"`
	Title_2       string         `json:"title_2"`
	Description_2 string         `json:"description_2"`
}

func (q *Queries) GetUserSavedResources(ctx context.Context, userID string) ([]GetUserSavedResourcesRow, error) {
	rows, err := q.query(ctx, q.getUserSavedResourcesStmt, getUserSavedResources, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserSavedResourcesRow{}
	for rows.Next() {
		var i GetUserSavedResourcesRow
		if err := rows.Scan(
			&i.StudyListID,
			&i.ResourceID,
			&i.TimeAdded,
			&i.ID,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
			&i.ID_2,
			&i.UserID,
			&i.CreationTime,
			&i.Title_2,
			&i.Description_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserStudyLists = `-- name: GetUserStudyLists :many
SELECT id, user_id, creation_time, title, description FROM study_lists
WHERE user_id = $1
ORDER BY creation_time DESC
`

func (q *Queries) GetUserStudyLists(ctx context.Context, userID string) ([]StudyList, error) {
	rows, err := q.query(ctx, q.getUserStudyListsStmt, getUserStudyLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StudyList{}
	for rows.Next() {
		var i StudyList
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAllUserStudyLists = `-- name: RemoveAllUserStudyLists :exec
DELETE FROM study_lists
WHERE user_id = $1
`

func (q *Queries) RemoveAllUserStudyLists(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.removeAllUserStudyListsStmt, removeAllUserStudyLists, userID)
	return err
}

const removeResourceFromStudyList = `-- name: RemoveResourceFromStudyList :exec
DELETE FROM study_list_resource
WHERE resource_id = $1
`

func (q *Queries) RemoveResourceFromStudyList(ctx context.Context, resourceID int64) error {
	_, err := q.exec(ctx, q.removeResourceFromStudyListStmt, removeResourceFromStudyList, resourceID)
	return err
}

const removeStudyList = `-- name: RemoveStudyList :exec
DELETE FROM study_lists
WHERE id = $1
`

func (q *Queries) RemoveStudyList(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.removeStudyListStmt, removeStudyList, id)
	return err
}

const updateStudyList = `-- name: UpdateStudyList :one
UPDATE study_lists
SET title = $2, description = $3
WHERE id = $1
RETURNING id, user_id, creation_time, title, description
`

type UpdateStudyListParams struct {
	ID          int64  `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) UpdateStudyList(ctx context.Context, arg UpdateStudyListParams) (StudyList, error) {
	row := q.queryRow(ctx, q.updateStudyListStmt, updateStudyList, arg.ID, arg.Title, arg.Description)
	var i StudyList
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}
