// Code generated by sqlc. DO NOT EDIT.
// source: discussions.sql

package db

import (
	"context"
	"database/sql"
)

const addPostDiscussion = `-- name: AddPostDiscussion :one
INSERT INTO post_discussions (
  creator_id,
  post_id,
  title,
  description
) VALUES (
    $1, $2, $3, $4
) RETURNING id, creator_id, post_id, creation_time, title, description
`

type AddPostDiscussionParams struct {
	CreatorID   string         `json:"creator_id"`
	PostID      string         `json:"post_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) AddPostDiscussion(ctx context.Context, arg AddPostDiscussionParams) (PostDiscussion, error) {
	row := q.queryRow(ctx, q.addPostDiscussionStmt, addPostDiscussion,
		arg.CreatorID,
		arg.PostID,
		arg.Title,
		arg.Description,
	)
	var i PostDiscussion
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PostID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getPostDiscussionById = `-- name: GetPostDiscussionById :one
SELECT id, creator_id, post_id, creation_time, title, description FROM post_discussions
WHERE id = $1
`

func (q *Queries) GetPostDiscussionById(ctx context.Context, id int64) (PostDiscussion, error) {
	row := q.queryRow(ctx, q.getPostDiscussionByIdStmt, getPostDiscussionById, id)
	var i PostDiscussion
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PostID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}

const getPostDiscussions = `-- name: GetPostDiscussions :many
SELECT id, creator_id, post_id, creation_time, title, description FROM post_discussions
WHERE post_id = $1
ORDER BY id DESC LIMIT $2
`

type GetPostDiscussionsParams struct {
	Postid     string `json:"postid"`
	Maxresults int32  `json:"maxresults"`
}

func (q *Queries) GetPostDiscussions(ctx context.Context, arg GetPostDiscussionsParams) ([]PostDiscussion, error) {
	rows, err := q.query(ctx, q.getPostDiscussionsStmt, getPostDiscussions, arg.Postid, arg.Maxresults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostDiscussion{}
	for rows.Next() {
		var i PostDiscussion
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostDiscussionsByCursor = `-- name: GetPostDiscussionsByCursor :many
SELECT id, creator_id, post_id, creation_time, title, description FROM post_discussions
WHERE post_id = $1
AND id < $2
ORDER BY id DESC LIMIT $3
`

type GetPostDiscussionsByCursorParams struct {
	Postid     string `json:"postid"`
	Cursor     int64  `json:"cursor"`
	Maxresults int32  `json:"maxresults"`
}

func (q *Queries) GetPostDiscussionsByCursor(ctx context.Context, arg GetPostDiscussionsByCursorParams) ([]PostDiscussion, error) {
	rows, err := q.query(ctx, q.getPostDiscussionsByCursorStmt, getPostDiscussionsByCursor, arg.Postid, arg.Cursor, arg.Maxresults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostDiscussion{}
	for rows.Next() {
		var i PostDiscussion
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostDiscussionsByUser = `-- name: GetPostDiscussionsByUser :many
SELECT id, creator_id, post_id, creation_time, title, description FROM post_discussions
WHERE creator_id = $1
ORDER BY id DESC LIMIT $2
`

type GetPostDiscussionsByUserParams struct {
	Creatorid  string `json:"creatorid"`
	Maxresults int32  `json:"maxresults"`
}

func (q *Queries) GetPostDiscussionsByUser(ctx context.Context, arg GetPostDiscussionsByUserParams) ([]PostDiscussion, error) {
	rows, err := q.query(ctx, q.getPostDiscussionsByUserStmt, getPostDiscussionsByUser, arg.Creatorid, arg.Maxresults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostDiscussion{}
	for rows.Next() {
		var i PostDiscussion
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostDiscussionsByUserByCursor = `-- name: GetPostDiscussionsByUserByCursor :many
SELECT id, creator_id, post_id, creation_time, title, description FROM post_discussions
WHERE creator_id = $1
AND id < slqc.arg(cursor)
ORDER BY id DESC LIMIT $2
`

type GetPostDiscussionsByUserByCursorParams struct {
	Creatorid  string `json:"creatorid"`
	Maxresults int32  `json:"maxresults"`
}

func (q *Queries) GetPostDiscussionsByUserByCursor(ctx context.Context, arg GetPostDiscussionsByUserByCursorParams) ([]PostDiscussion, error) {
	rows, err := q.query(ctx, q.getPostDiscussionsByUserByCursorStmt, getPostDiscussionsByUserByCursor, arg.Creatorid, arg.Maxresults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostDiscussion{}
	for rows.Next() {
		var i PostDiscussion
		if err := rows.Scan(
			&i.ID,
			&i.CreatorID,
			&i.PostID,
			&i.CreationTime,
			&i.Title,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePostDiscussion = `-- name: RemovePostDiscussion :exec
DELETE FROM post_discussions
WHERE id = $1
`

func (q *Queries) RemovePostDiscussion(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.removePostDiscussionStmt, removePostDiscussion, id)
	return err
}

const removePostDiscussionsByCreator = `-- name: RemovePostDiscussionsByCreator :exec
DELETE FROM post_discussions
WHERE creator_id = $1
`

func (q *Queries) RemovePostDiscussionsByCreator(ctx context.Context, creatorID string) error {
	_, err := q.exec(ctx, q.removePostDiscussionsByCreatorStmt, removePostDiscussionsByCreator, creatorID)
	return err
}

const updatePostDiscussion = `-- name: UpdatePostDiscussion :one
UPDATE post_discussions
SET title = $2, description = $3
WHERE id = $1
RETURNING id, creator_id, post_id, creation_time, title, description
`

type UpdatePostDiscussionParams struct {
	ID          int64          `json:"id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdatePostDiscussion(ctx context.Context, arg UpdatePostDiscussionParams) (PostDiscussion, error) {
	row := q.queryRow(ctx, q.updatePostDiscussionStmt, updatePostDiscussion, arg.ID, arg.Title, arg.Description)
	var i PostDiscussion
	err := row.Scan(
		&i.ID,
		&i.CreatorID,
		&i.PostID,
		&i.CreationTime,
		&i.Title,
		&i.Description,
	)
	return i, err
}
