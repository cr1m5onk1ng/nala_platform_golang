// Code generated by sqlc. DO NOT EDIT.
// source: post.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const addPost = `-- name: AddPost :one
INSERT INTO user_post (
  user_id, 
  resource_id, 
  post_title, 
  post_description 
) VALUES (
    $1, $2, $3, $4
) RETURNING id, user_id, resource_id, post_time, post_title, post_description
`

type AddPostParams struct {
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
}

func (q *Queries) AddPost(ctx context.Context, arg AddPostParams) (UserPost, error) {
	row := q.queryRow(ctx, q.addPostStmt, addPost,
		arg.UserID,
		arg.ResourceID,
		arg.PostTitle,
		arg.PostDescription,
	)
	var i UserPost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResourceID,
		&i.PostTime,
		&i.PostTitle,
		&i.PostDescription,
	)
	return i, err
}

const getPostById = `-- name: GetPostById :one
SELECT id, user_id, resource_id, post_time, post_title, post_description FROM user_post
WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id string) (UserPost, error) {
	row := q.queryRow(ctx, q.getPostByIdStmt, getPostById, id)
	var i UserPost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResourceID,
		&i.PostTime,
		&i.PostTitle,
		&i.PostDescription,
	)
	return i, err
}

const getPostDifficultyVotes = `-- name: GetPostDifficultyVotes :many
SELECT user_id, post_id, difficulty from votes
WHERE post_id = $1
`

func (q *Queries) GetPostDifficultyVotes(ctx context.Context, postID string) ([]Vote, error) {
	rows, err := q.query(ctx, q.getPostDifficultyVotesStmt, getPostDifficultyVotes, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Vote{}
	for rows.Next() {
		var i Vote
		if err := rows.Scan(&i.UserID, &i.PostID, &i.Difficulty); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostLikes = `-- name: GetPostLikes :many
SELECT user_id, post_id from likes
WHERE post_id = $1
`

func (q *Queries) GetPostLikes(ctx context.Context, postID string) ([]Like, error) {
	rows, err := q.query(ctx, q.getPostLikesStmt, getPostLikes, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Like{}
	for rows.Next() {
		var i Like
		if err := rows.Scan(&i.UserID, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostTags = `-- name: GetPostTags :many
SELECT post_id, tag FROM tags
WHERE post_id = $1
`

func (q *Queries) GetPostTags(ctx context.Context, postID string) ([]Tag, error) {
	rows, err := q.query(ctx, q.getPostTagsStmt, getPostTags, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.PostID, &i.Tag); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByCategory = `-- name: GetPostsByCategory :many
SELECT p.id, user_id, resource_id, post_time, post_title, post_description, r.id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM user_post AS p
JOIN resources AS r
ON p.resource_id = r.id
WHERE r.category = $1
`

type GetPostsByCategoryRow struct {
	ID              string         `json:"id"`
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTime        time.Time      `json:"post_time"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
	ID_2            int64          `json:"id_2"`
	Url             string         `json:"url"`
	Language        string         `json:"language"`
	Difficulty      sql.NullString `json:"difficulty"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	MediaType       sql.NullString `json:"media_type"`
	Category        string         `json:"category"`
	ThumbnailUrl    sql.NullString `json:"thumbnail_url"`
	InsertedAt      time.Time      `json:"inserted_at"`
}

func (q *Queries) GetPostsByCategory(ctx context.Context, category string) ([]GetPostsByCategoryRow, error) {
	rows, err := q.query(ctx, q.getPostsByCategoryStmt, getPostsByCategory, category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByCategoryRow{}
	for rows.Next() {
		var i GetPostsByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PostTime,
			&i.PostTitle,
			&i.PostDescription,
			&i.ID_2,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByDifficulty = `-- name: GetPostsByDifficulty :many
SELECT p.id, user_id, resource_id, post_time, post_title, post_description, r.id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM user_post AS p
JOIN resources AS r
ON p.resource_id = r.id
WHERE r.difficulty = $1
`

type GetPostsByDifficultyRow struct {
	ID              string         `json:"id"`
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTime        time.Time      `json:"post_time"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
	ID_2            int64          `json:"id_2"`
	Url             string         `json:"url"`
	Language        string         `json:"language"`
	Difficulty      sql.NullString `json:"difficulty"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	MediaType       sql.NullString `json:"media_type"`
	Category        string         `json:"category"`
	ThumbnailUrl    sql.NullString `json:"thumbnail_url"`
	InsertedAt      time.Time      `json:"inserted_at"`
}

func (q *Queries) GetPostsByDifficulty(ctx context.Context, difficulty sql.NullString) ([]GetPostsByDifficultyRow, error) {
	rows, err := q.query(ctx, q.getPostsByDifficultyStmt, getPostsByDifficulty, difficulty)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByDifficultyRow{}
	for rows.Next() {
		var i GetPostsByDifficultyRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PostTime,
			&i.PostTitle,
			&i.PostDescription,
			&i.ID_2,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByLanguage = `-- name: GetPostsByLanguage :many
SELECT p.id, user_id, resource_id, post_time, post_title, post_description, r.id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM user_post AS p
JOIN resources AS r
ON p.resource_id = r.id
WHERE r.language = $1
`

type GetPostsByLanguageRow struct {
	ID              string         `json:"id"`
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTime        time.Time      `json:"post_time"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
	ID_2            int64          `json:"id_2"`
	Url             string         `json:"url"`
	Language        string         `json:"language"`
	Difficulty      sql.NullString `json:"difficulty"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	MediaType       sql.NullString `json:"media_type"`
	Category        string         `json:"category"`
	ThumbnailUrl    sql.NullString `json:"thumbnail_url"`
	InsertedAt      time.Time      `json:"inserted_at"`
}

func (q *Queries) GetPostsByLanguage(ctx context.Context, language string) ([]GetPostsByLanguageRow, error) {
	rows, err := q.query(ctx, q.getPostsByLanguageStmt, getPostsByLanguage, language)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByLanguageRow{}
	for rows.Next() {
		var i GetPostsByLanguageRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PostTime,
			&i.PostTitle,
			&i.PostDescription,
			&i.ID_2,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByMediaType = `-- name: GetPostsByMediaType :many
SELECT p.id, user_id, resource_id, post_time, post_title, post_description, r.id, url, language, difficulty, title, description, media_type, category, thumbnail_url, inserted_at FROM user_post AS p
JOIN resources AS r
ON p.resource_id = r.id
WHERE r.media_type = $1
`

type GetPostsByMediaTypeRow struct {
	ID              string         `json:"id"`
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTime        time.Time      `json:"post_time"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
	ID_2            int64          `json:"id_2"`
	Url             string         `json:"url"`
	Language        string         `json:"language"`
	Difficulty      sql.NullString `json:"difficulty"`
	Title           string         `json:"title"`
	Description     sql.NullString `json:"description"`
	MediaType       sql.NullString `json:"media_type"`
	Category        string         `json:"category"`
	ThumbnailUrl    sql.NullString `json:"thumbnail_url"`
	InsertedAt      time.Time      `json:"inserted_at"`
}

func (q *Queries) GetPostsByMediaType(ctx context.Context, mediaType sql.NullString) ([]GetPostsByMediaTypeRow, error) {
	rows, err := q.query(ctx, q.getPostsByMediaTypeStmt, getPostsByMediaType, mediaType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostsByMediaTypeRow{}
	for rows.Next() {
		var i GetPostsByMediaTypeRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PostTime,
			&i.PostTitle,
			&i.PostDescription,
			&i.ID_2,
			&i.Url,
			&i.Language,
			&i.Difficulty,
			&i.Title,
			&i.Description,
			&i.MediaType,
			&i.Category,
			&i.ThumbnailUrl,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT id, user_id, resource_id, post_time, post_title, post_description FROM user_post
WHERE user_id = $1
`

func (q *Queries) GetPostsByUser(ctx context.Context, userID string) ([]UserPost, error) {
	rows, err := q.query(ctx, q.getPostsByUserStmt, getPostsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserPost{}
	for rows.Next() {
		var i UserPost
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ResourceID,
			&i.PostTime,
			&i.PostTitle,
			&i.PostDescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePost = `-- name: RemovePost :exec
DELETE FROM user_post 
WHERE id = $1
`

func (q *Queries) RemovePost(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.removePostStmt, removePost, id)
	return err
}

const removeUserPosts = `-- name: RemoveUserPosts :exec
DELETE FROM user_post
WHERE user_id = $1
`

func (q *Queries) RemoveUserPosts(ctx context.Context, userID string) error {
	_, err := q.exec(ctx, q.removeUserPostsStmt, removeUserPosts, userID)
	return err
}

const updatePost = `-- name: UpdatePost :one
UPDATE user_post 
SET post_title = $3, post_description = $4
WHERE user_id = $1 AND resource_id = $2
RETURNING id, user_id, resource_id, post_time, post_title, post_description
`

type UpdatePostParams struct {
	UserID          string         `json:"user_id"`
	ResourceID      int64          `json:"resource_id"`
	PostTitle       string         `json:"post_title"`
	PostDescription sql.NullString `json:"post_description"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UserPost, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost,
		arg.UserID,
		arg.ResourceID,
		arg.PostTitle,
		arg.PostDescription,
	)
	var i UserPost
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResourceID,
		&i.PostTime,
		&i.PostTitle,
		&i.PostDescription,
	)
	return i, err
}
